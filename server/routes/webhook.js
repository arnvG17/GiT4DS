import express from "express";
import crypto from "crypto";
import User from "../models/User.js";
import Commit from "../models/Commit.js"; 

const router = express.Router();

// ðŸ’¡ NEW: Helper to access the injected Socket.IO instance.
// NOTE: Your main server file MUST inject 'io' into the request (e.g., req.io = io)
const injectIo = (req, res, next) => {
    // If the IO object exists on the request (injected by the server setup) use it.
    // Otherwise, use the placeholder for local testing/debugging.
    req.io = req.io || io;
    next();
};

// Placeholder for the imported Socket.IO instance (ONLY used if req.io is not injected)
const io = { 
    emit: (event, data) => console.log(`[Socket.IO Broadcast] (Placeholder) Emitting: ${event}`, data) 
}; 

// --- Helper Functions ---

/**
 * Verifies the integrity and origin of the GitHub webhook payload using the secret.
 */
const verifySignature = (payload, signature, secret) => {
Â  Â  // GitHub uses sha256. The signature header includes "sha256=".
Â  Â  const hash = `sha256=${crypto.createHmac('sha256', secret).update(payload).digest('hex')}`;
Â  Â  
Â  Â  // Use timingSafeEqual to prevent timing attacks
Â  Â  return crypto.timingSafeEqual(Buffer.from(signature), Buffer.from(hash));
};


/**
 * Calculates and fetches the latest leaderboard data from the database.
 * UPDATED to include firstCommitRankings.
 */
const calculateAndFetchLeaderboardData = async () => {
Â  Â  // 1. Calculate Total Commits (Group by user and count)
Â  Â  const commitCounts = await Commit.aggregate([
Â  Â  Â  Â  { $group: { _id: "$userId", count: { $sum: 1 } } },
Â  Â  Â  Â  { $sort: { count: -1 } },
Â  Â  Â  Â  { $limit: 10 }
Â  Â  ]);

    // 2. Find earliest commit for each user (for the "First Commit" leaderboard)
    const firstCommits = await Commit.aggregate([
        // Group by user and find the minimum (earliest) timestamp
        { $group: { _id: "$userId", firstCommitTimestamp: { $min: "$timestamp" } } },
        // Sort by the earliest timestamp (ascending)
        { $sort: { firstCommitTimestamp: 1 } }
    ]);

Â  Â  // 3. Populate User details for both aggregates
Â  Â  const usersWithCounts = await User.populate(commitCounts, { path: '_id', select: 'username teamName' });
    const usersWithFirstCommits = await User.populate(firstCommits, { path: '_id', select: 'teamName' });
Â  Â  
Â  Â  // 4. Find most recent activity (for the live feed)
Â  Â  const recentActivity = await Commit.find()
Â  Â  Â  Â  .sort({ timestamp: -1 })
Â  Â  Â  Â  .limit(5)
Â  Â  Â  Â  .populate('userId', 'username teamName') // Populate user details
Â  Â  Â  Â  .lean();

Â  Â  return {
Â  Â  Â  Â  totalCommits: usersWithCounts.map(u => ({ username: u._id.username, teamName: u._id.teamName, count: u.count })),
        
        // Return rankings for the "First Commit" leaderboard
        firstCommitRankings: usersWithFirstCommits.map(u => ({ 
            teamName: u._id.teamName, 
            firstCommitTimestamp: u.firstCommitTimestamp 
        })),

Â  Â  Â  Â  recentActivity: recentActivity.map(c => ({
Â  Â  Â  Â  Â  Â  username: c.userId.username,
Â  Â  Â  Â  Â  Â  repo: c.repoFullName,
Â  Â  Â  Â  Â  Â  message: c.message,
Â  Â  Â  Â  Â  Â  timestamp: c.timestamp,
Â  Â  Â  Â  }))
Â  Â  };
};

// --- Webhook Route (Steps 3, 4, 5) ---

// ðŸ’¡ ADD injectIo MIDDLEWARE HERE
router.post("/github", injectIo, express.raw({ type: 'application/json' }), async (req, res) => {
    // Access the actual io object (or the placeholder if not injected)
    const io = req.io;
    console.log("Webhook activated and " , req)

Â  Â  // 1. Get essential headers and raw payload
Â  Â  const signature = req.get('X-Hub-Signature-256');
Â  Â  const event = req.get('X-GitHub-Event');
Â  Â  const rawPayload = req.body.toString('utf8');
Â  Â  
Â  Â  // Check for push, status, or create events
    const allowedEvents = ['push', 'status', 'create'];

Â  Â  if (!signature || !allowedEvents.includes(event)) {
Â  Â  Â  Â  return res.status(400).send(`Webhook rejected: Missing signature or event is not one of ${allowedEvents.join(', ')}.`);
Â  Â  }

    // IMMEDIATE RESPONSE: Send a non-blocking response (202 Accepted) to GitHub ASAP
    res.status(202).send(`Webhook accepted for event: ${event}. Processing in background.`);


Â  Â  try {
Â  Â  Â  Â  const payload = JSON.parse(rawPayload);
Â  Â  Â  Â  const repoFullName = payload.repository?.full_name;
Â  Â  Â  Â  
Â  Â  Â  Â  if (!repoFullName) return; // Exit background task if no repo is specified

Â  Â  Â  Â  // 2. Find the associated user and secret
Â  Â  Â  Â  const user = await User.findOne({ "activeWebhooks.repoFullName": repoFullName });
Â  Â  Â  Â  
Â  Â  Â  Â  if (!user) {
Â  Â  Â  Â  Â  Â  console.warn(`Webhook received for unregistered repo: ${repoFullName}. Discarding.`);
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  const webhookEntry = user.activeWebhooks.find(h => h.repoFullName === repoFullName);
Â  Â  Â  Â  const secret = webhookEntry?.webhookSecret;
Â  Â  Â  Â  
Â  Â  Â  Â  if (!secret) {
Â  Â  Â  Â  Â  Â  console.error(`Secret missing for repo: ${repoFullName}. Discarding.`);
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  // 3. Verify Signature (CRITICAL SECURITY STEP)
Â  Â  Â  Â  if (!verifySignature(rawPayload, signature, secret)) {
Â  Â  Â  Â  Â  Â  console.warn(`Invalid signature for repo: ${repoFullName}. Possible tampering. Discarding payload.`);
Â  Â  Â  Â  Â  Â  return; 
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  // 4. Process and Store Commits ONLY if it's a PUSH event
        if (event === 'push') {
Â  Â  Â  Â  Â  Â  const commits = payload.commits || [];
Â  Â  Â  Â  Â  Â  if (commits.length === 0) {
Â  Â  Â  Â  Â  Â  Â  Â  console.log(`Push event received for ${repoFullName} but no new commits (e.g., branch deletion).`);
Â  Â  Â  Â  Â  Â  } else {
                const commitInserts = commits.map(commit => ({
                    userId: user._id,
                    sha: commit.id,
                    message: commit.message,
                    timestamp: new Date(commit.timestamp),
                    repoFullName: repoFullName,
                    authorName: commit.author.name,
                    authorEmail: commit.author.email,
                }));

                await Commit.insertMany(commitInserts);
                console.log(`Successfully stored ${commits.length} new commits for ${repoFullName}.`);
            }
Â  Â  Â  Â  } else {
            // Log that a non-push event was successfully verified.
            console.log(`Acknowledging verified non-push event (${event}) for ${repoFullName}. No commit data saved.`);
        }

Â  Â  Â  Â  // 5. Calculate and Emit Real-Time Leaderboard Update (Triggered on any verified, relevant event)
Â  Â  Â  Â  const currentLeaderboard = await calculateAndFetchLeaderboardData(); 
        console.log(currentLeaderboard)
Â  Â  Â  Â  
Â  Â  Â  Â  // This is the real-time push to the dashboard:
Â  Â  Â  Â  io.emit('leaderboard:update', currentLeaderboard); 
        console.log(`âœ… Real-time dashboard update broadcasted after '${event}' event.`);

Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Error processing GitHub webhook in background:", error);
Â  Â  }
});

export default router;
